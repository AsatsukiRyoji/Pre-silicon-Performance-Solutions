#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Performance Test PerfModel basic
@author: Li Rui 
"""
import os,sys,re
from pandas import DataFrame as DF
import pandas as pd
import pdb

cdir = os.path.dirname(os.path.realpath(__file__)) + '/'
sys.path.append(cdir+'../')

import utility.util as util
from measure.core_performance_measure import ComputeCoreMeasure as CCM


class PerfOpLtcPM:
    
    def __init__(self):
        self.theo, self.meas, self.chk_df = DF(), DF(), DF()
        pass


    def measure(self, desc, algo, edir='./', test=None, gui_en=False, **kw):
        """Test Measure
        :algo: [], or str list "[]", or single str
        :edir: Support relative dir './' and abs. dir in single test mode and batch mode
        :test: reg-ex of test name, str
        """
        edir = edir + '/' if not edir.endswith('/') else edir
        edir = os.getcwd() + '/' if edir == './' else edir
        ##In single mode, the dir could be under test's out
        edir = edir + '../' if edir.endswith(test+'/') else edir

        if type(algo) == str:
            try: algo_l = eval(algo)  #If it's a str([])
            except: algo_l = [algo]

        meta_df = pd.DataFrame(index=[0])
        meta_df['name'] = test
        meta_df['edir'] = meta_df['name'].apply(lambda x: edir+x+'/')
        ##remove invalid out directory is generated by test.dv
        meta_df['edir'] = meta_df['edir'].apply(lambda x: x if os.path.isdir(x) else None)
        ##FIXME: if use this in GC inst test, you need to keep warmup=1.
        meta_df['warmup'] = 0
        meta_df['algo'] = ','.join(algo_l)
        algo_dict = util.measure_algo_d.get(algo)
        ccm = CCM(desc, meta_df)
        _df = ccm.get_measure()
        
        _df = _df.drop(['edir', 'warmup'], axis=1)
        _df['ave_cycle'] = _df['measure']
        out = [DF()]
        _df.T.apply(util.split_se_2df, args=(',', out)) 
        self.meas = self.meas.append(out[0], ignore_index=True)
        self.meas['ave_cycle'] = self.meas['measure']
        if gui_en:
            gui = util.PMGui()
            gui.run([self.meas])


if __name__=='__main__':
    opt = util.option_parser()
    ptpm = PerfOpLtcPM()
    if opt.func == 'measure':
        ptpm.measure(opt.desc, opt.algo, opt.edir, opt.test)
        
    else:
        print('NYI')
        sys.exit()

