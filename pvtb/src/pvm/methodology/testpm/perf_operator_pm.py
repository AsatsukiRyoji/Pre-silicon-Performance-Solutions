#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Performance Test PerfModel basic
@author: Li Lizhao
"""
import os,sys,re
from pandas import DataFrame as DF
import pandas as pd
import pdb

cdir = os.path.dirname(os.path.realpath(__file__)) + '/'
sys.path.append(cdir+'../')

import utility.util as util
from measure.core_performance_measure import ComputeCoreMeasure as CCM


class PerfOpPM:
    
    def __init__(self):
        self.theo, self.meas, self.chk_df = DF(), DF(), DF()
        pass


    def measure(self, desc, algo, edir='./', test=None, gui_en=False, cal_value=None, int=None, wpg=None, **kw):
        """Test Measure
        :algo: [], or str list "[]", or single str
        :edir: Support relative dir './' and abs. dir in single test mode and batch mode
        :test: reg-ex of test name, str
        """
        edir = edir + '/' if not edir.endswith('/') else edir
        edir = os.getcwd() + '/' if edir == './' else edir
        ##In single mode, the dir could be under test's out
        edir = edir + '../' if edir.endswith(test+'/') else edir

        if type(algo) == str:
            try: algo_l = eval(algo)  #If it's a str([])
            except: algo_l = [algo]

        meta_df = pd.DataFrame(index=[0])
        meta_df['name'] = test
        meta_df['edir'] = meta_df['name'].apply(lambda x: edir+x+'/')
        ##remove invalid out directory is generated by test.dv
        meta_df['edir'] = meta_df['edir'].apply(lambda x: x if os.path.isdir(x) else None)
        ##FIXME: if use this in GC inst test, you need to keep warmup=1.
        meta_df['warmup'] = 0
        meta_df['algo'] = ','.join(algo_l)
        algo_dict = util.measure_algo_d.get(algo)
        ccm = CCM(desc, meta_df)
        _df = ccm.get_measure()
        _df['effective_execution_time_us'] = round((float(_df['effective_execution_time_cycle'])/(1.5*10**9)*(10**6)), 2)
        print('[effective_execution_time_cycle]: %s. Unit is cycles.' % _df.loc[0,'effective_execution_time_cycle'])
        print('[effective_execution_time_us]: %s. Unit is us.' % _df.loc[0,'effective_execution_time_us'])
        if algo == 'operator_performance':
            if cal_value is None:
                pass
            else:
                _df['cal_value'] = cal_value
                print('[cal_value]: %s' % cal_value)
                cal_result = round((float(cal_value)/float(_df['effective_execution_time_cycle']))/1000*1.5, 2)  ##gpu_freq:1.5GHz=1.5x10**9Hz, Tera:10**12.
                _df['measure'] = cal_result
                ##_df['formula'] = 'tflops=cal_value/effective_execution_time'
                if int is None:
                    _df['unit'] = 'tflops'
                    print('[tflops]: %d' % cal_result)
                else:
                    _df['unit'] = 'tops'
                    print('[tops]: %d' % cal_result)
        if 'wpg' in algo:
            meta_df['wpg'] = algo_dict['wpg']
        _df = _df.drop(['edir', 'warmup'], axis=1)
        out = [DF()]
        _df.T.apply(util.split_se_2df, args=(',', out)) 
        self.meas = self.meas.append(out[0], ignore_index=True)
        ##modify channel_risk
        self.meas.loc[self.meas['channel_risk']=='False','channel_risk'] = 'No_Risk'
        self.meas.loc[self.meas['channel_risk']=='True','channel_risk'] = 'Have_Risk'
        if gui_en:
            gui = util.PMGui()
            gui.run([self.meas])


if __name__=='__main__':
    opt = util.option_parser()
    ptpm = PerfOpPM()
    if opt.func == 'measure':
        ptpm.measure(opt.desc, opt.algo, opt.edir, opt.test, opt.gui_en, opt.cal_value, opt.int, opt.wpg)
        
    else:
        print('NYI')
        sys.exit()

